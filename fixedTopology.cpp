#include <iostream>
#include <random>
#include <ctime>
#include "expressionses.h"

using namespace std;

const size_t n = 4;

std::mt19937 gen(time(nullptr));
std::uniform_int_distribution<size_t> dist(1, (1ull << (1ull << n)) - 1);

ExpressionPtr build_sdnf(size_t func_num) {
    ExpressionPtr ans;
    bool setAns = false;
    for (size_t set_num = 0; set_num < (1ull << n); ++set_num) {
        if (((func_num >> set_num) & 1ull) == 0) continue;
        ExpressionPtr block[n];
        for (size_t var = 0; var < n; ++var) {
            size_t var_ind = n - var - 1;
            if ((set_num >> var) & 1ull) {
                block[var_ind] = Variable(var_ind);
            } else {
                block[var_ind] = Not(Variable(var_ind));
            }
        }
        ExpressionPtr block_expr;
        if (n == 4) {
            block_expr = And(And(block[0], block[1]), And(block[2], block[3]));
        } else if (n == 8) {
            block_expr = And(And(And(block[0], block[1]), And(block[2], block[3])),
                             And(And(block[4], block[5]), And(block[6], block[7])));
        }
        if (!setAns) {
            ans = block_expr;
            setAns = true;
        } else {
            ans = Or(ans, block_expr);
        }
    }
    return ans;
}

int work_with(const ExpressionPtr &function) {
    bool got_functions[(1ull << (1ull << n))];
    bool vars[n];
    for (bool &val : got_functions) {
        val = false;
    }
    size_t ans = 0;
    size_t id = 0;
    function->markConnections(id);
    cout << "Operations togo: " << (1ull << id) * (2 * (1ull << n) + n) << endl;
    for (size_t connectionMask = 0; connectionMask < (1ull << id); ++connectionMask) {
        if (connectionMask % 100 == 0) {
            cout << "\rCurrent function: " << 100. * connectionMask / (1ull << id)
                 << "%, and result is already " << ans << "...";
            cout.flush();
        }
        size_t func_num = 0;
        for (size_t varsMask = 0; varsMask < (1ull << n); ++varsMask) {
            size_t connectionMaskCopy = connectionMask;
            for (size_t i = 0; i < n; ++i) {
                vars[i] = (varsMask >> i) & 1ull;
            }
            bool evaled = function->evaluate(vars, connectionMaskCopy);
            func_num = func_num | (static_cast<unsigned int>(evaled) << varsMask);
        }
        if (!got_functions[func_num]) {
            got_functions[func_num] = true;
            ans += 1;
        }
    }
    cout << endl << "Completed!" << endl;
    return ans;
}

int main() {
    int maxAns = 0;
    vector<size_t> prob_good = {61455, 55323, 47133, 55335, 59435, 30765, 47150, 61491, 61500, 12351, 49215, 47175, 30795, 59469, 55374, 61525, 61530, 41055, 20575, 61542, 24687, 59505, 55410, 47220, 34935, 30840, 18555, 10365, 6270, 47243, 55437, 61593, 37023, 61605, 61610, 41135, 20655, 55473, 47288, 35003, 6333, 61635, 61644, 49359, 12495, 47313, 55512, 6363, 35037, 47330, 55524, 59624, 10475, 18669, 35054, 61680, 12531, 49395, 20725, 37110, 41205, 24825, 20730, 41210, 12540, 49404, 255, 63753, 39183, 45339, 53533, 45351, 28971, 57645, 53550, 39219, 14649, 51513, 39228, 53575, 57675, 29005, 45390, 39253, 43353, 39258, 22873, 63840, 51555, 43365, 39270, 26985, 22890, 14700, 2415, 29041, 45426, 53620, 4471, 8571, 16765, 53643, 45453, 39321, 39333, 22953, 39338, 43433, 45489, 53688, 4539, 33213, 39363, 14793, 51657, 39372, 53713, 45528, 33243, 4573, 57825, 53730, 45540, 33255, 29160, 16875, 8685, 4590, 39408, 2553, 64005, 64010, 43535, 23055, 45591, 29211, 57885, 53790, 29223, 57902, 43571, 23091, 51765, 14901, 14906, 51770, 43580, 23100, 57927, 29262, 64080, 51795, 14931, 43605, 39510, 23125, 27225, 43610, 23130, 51804, 14940, 2655, 27237, 23142, 43622, 27242, 29298, 57972, 8823, 17022, 53895, 57995, 29325, 45710, 39573, 23193, 43673, 39578, 64160, 51875, 15011, 43685, 23205, 43690, 23210, 51884, 15020, 2735, 29361, 45746, 4791, 58040, 8891, 33470, 23235, 43715, 15045, 51909, 15050, 51914, 23244, 43724, 58065, 53970, 45780, 33495, 29400, 17115, 8925, 4830, 58082, 29412, 17127, 8942, 43760, 23280, 2805, 2810, 62211, 62220, 49935, 13071, 47889, 56088, 6939, 35613, 31521, 47906, 6951, 60200, 11051, 35630, 62256, 13107, 49971, 41781, 21301, 21306, 41786, 13116, 49980, 831, 60225, 56130, 47940, 35655, 31560, 19275, 11085, 6990, 21331, 41811, 13141, 50005, 50010, 13146, 41820, 21340, 25443, 13158, 50022, 25452, 11121, 7026, 35700, 19320, 56193, 48008, 35723, 7053, 37779, 13209, 50073, 37788, 21411, 41891, 13221, 50085, 50090, 13226, 21420, 41900, 7089, 35768, 62400, 13251, 50115, 41925, 21445, 37830, 25545, 41930, 21450, 13260, 50124, 975, 35793, 7128, 19425, 35810, 7140, 11240, 13296, 50160, 1011, 1020, 64515, 64524, 15375, 52239, 54295, 58395, 29725, 46110, 58407, 29742, 64560, 15411, 52275, 23605, 39990, 44085, 27705, 23610, 44090, 15420, 52284, 3135, 29767, 58446, 44115, 23635, 15445, 52309, 52314, 15450, 44124, 23644, 27747, 52326, 15462, 27756, 58482, 29812, 17527, 9342, 46215, 29835, 58509, 54414, 40083, 15513, 52377, 40092, 23715, 44195, 15525, 52389, 52394, 15530, 44204, 23724, 58545, 54450, 46260, 33975, 29880, 17595, 9405, 5310, 64704, 15555, 52419, 23749, 44229, 23754, 44234, 15564, 52428, 3279, 29905, 54484, 5335, 58584, 17629, 34014, 29922, 58596, 9447, 17646, 15600, 52464, 3315, 3324, 62725, 62730, 42255, 21775, 56593, 48408, 36123, 7453, 60705, 56610, 48420, 36135, 32040, 19755, 11565, 7470, 21811, 42291, 50485, 13621, 13626, 50490, 42300, 21820, 32065, 56644, 7495, 60744, 19789, 36174, 62800, 13651, 50515, 21845, 42325, 21850, 42330, 13660, 50524, 1375, 25957, 42342, 21862, 25962, 19825, 36210, 7540, 11640, 48513, 56712, 7563, 36237, 38293, 42393, 38298, 21913, 62880, 13731, 50595, 21925, 38310, 42405, 26025, 21930, 42410, 13740, 50604, 1455, 36273, 7608, 42435, 21955, 13765, 50629, 50634, 13770, 21964, 42444, 7633, 36312, 11745, 7650, 36324, 19944, 22000, 42480, 1525, 1530, 62982, 26127, 60945, 56850, 48660, 36375, 32280, 19995, 11805, 7710, 60962, 32292, 20007, 11822, 26163, 13878, 50742, 26172, 32322, 60996, 11847, 20046, 26197, 42582, 22102, 26202, 26214, 20082, 11892, 48770, 56964, 61064, 11915, 20109, 36494, 63120, 50835, 42645, 38550, 26265, 22170, 13980, 1695, 26277, 22182, 42662, 26282, 20145, 36530, 7860, 11960, 26307, 14022, 50886, 26316, 11985, 7890, 36564, 20184, 12002, 20196, 26352, 1782, 65280, 16131, 52995, 24325, 40710, 44805, 28425, 24330, 44810, 53004, 16140, 3855, 30481, 46866, 55060, 5911, 10011, 18205, 30498, 59172, 10023, 18222, 53040, 16176, 3891, 3900, 59202, 30532, 18247, 10062, 44880, 24400, 3925, 3930, 28512, 3942, 10098, 18292, 59265, 55170, 46980, 34695, 30600, 18315, 10125, 6030, 40848, 3993, 44960, 24480, 4005, 4010, 10161, 6066, 34740, 18360, 53184, 16320, 4035, 4044, 18385, 34770, 6100, 10200, 18402, 10212, 4080};
    while (maxAns < (1u << (1u << n))) {
        size_t fNum = prob_good[dist(gen) % prob_good.size()];
        size_t num_ones = 0;
        for (size_t i = 0; i < (1u << n); ++i) {
            num_ones += ((fNum) >> i) & 1u;
        }
        if (num_ones > 8) {
            return 0;
        }
        ExpressionPtr f = build_sdnf(fNum);
        cout << f->toString() << endl;
        cout << "function number: " << fNum << endl;
        int ww = work_with(f);
        if (ww > maxAns) {
            maxAns = ww;
            cout << "New max ans! " << ww << endl << endl << endl;
        }
        string command =
                "python ./server/sender.py --children " + to_string(maxAns) + " --function \"" + f->toString() +
                "\" --function_number " + to_string(fNum);
        int result = system(command.c_str());
        if (result) {
            cout << "Error while sending, but you can see it in console" << endl;
        }
    }
    return 0;
}
